// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kostromin59/funpay/lots (interfaces: Lots)
//
// Generated by this command:
//
//	mockgen -destination ../mocks/lots.go -package mocks . Lots
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	lots "github.com/kostromin59/funpay/lots"
	gomock "go.uber.org/mock/gomock"
)

// MockLots is a mock of Lots interface.
type MockLots struct {
	ctrl     *gomock.Controller
	recorder *MockLotsMockRecorder
	isgomock struct{}
}

// MockLotsMockRecorder is the mock recorder for MockLots.
type MockLotsMockRecorder struct {
	mock *MockLots
}

// NewMockLots creates a new mock instance.
func NewMockLots(ctrl *gomock.Controller) *MockLots {
	mock := &MockLots{ctrl: ctrl}
	mock.recorder = &MockLotsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLots) EXPECT() *MockLotsMockRecorder {
	return m.recorder
}

// ByUser mocks base method.
func (m *MockLots) ByUser(ctx context.Context, userID int64) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByUser", ctx, userID)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByUser indicates an expected call of ByUser.
func (mr *MockLotsMockRecorder) ByUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByUser", reflect.TypeOf((*MockLots)(nil).ByUser), ctx, userID)
}

// Fields mocks base method.
func (m *MockLots) Fields(ctx context.Context, nodeID, offerID string) (lots.Fields, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fields", ctx, nodeID, offerID)
	ret0, _ := ret[0].(lots.Fields)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fields indicates an expected call of Fields.
func (mr *MockLotsMockRecorder) Fields(ctx, nodeID, offerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fields", reflect.TypeOf((*MockLots)(nil).Fields), ctx, nodeID, offerID)
}

// List mocks base method.
func (m *MockLots) List() map[string][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].(map[string][]string)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockLotsMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockLots)(nil).List))
}

// Save mocks base method.
func (m *MockLots) Save(ctx context.Context, fields lots.Fields) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, fields)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockLotsMockRecorder) Save(ctx, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockLots)(nil).Save), ctx, fields)
}

// Update mocks base method.
func (m *MockLots) Update(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockLotsMockRecorder) Update(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockLots)(nil).Update), ctx)
}
