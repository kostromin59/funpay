// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kostromin59/funpay (interfaces: Funpay)
//
// Generated by this command:
//
//	mockgen -destination mocks/funpay.go -package mocks . Funpay
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	url "net/url"
	reflect "reflect"

	goquery "github.com/PuerkitoBio/goquery"
	funpay "github.com/kostromin59/funpay"
	gomock "go.uber.org/mock/gomock"
)

// MockFunpay is a mock of Funpay interface.
type MockFunpay struct {
	ctrl     *gomock.Controller
	recorder *MockFunpayMockRecorder
	isgomock struct{}
}

// MockFunpayMockRecorder is the mock recorder for MockFunpay.
type MockFunpayMockRecorder struct {
	mock *MockFunpay
}

// NewMockFunpay creates a new mock instance.
func NewMockFunpay(ctrl *gomock.Controller) *MockFunpay {
	mock := &MockFunpay{ctrl: ctrl}
	mock.recorder = &MockFunpayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFunpay) EXPECT() *MockFunpayMockRecorder {
	return m.recorder
}

// Balance mocks base method.
func (m *MockFunpay) Balance() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Balance")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Balance indicates an expected call of Balance.
func (mr *MockFunpayMockRecorder) Balance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Balance", reflect.TypeOf((*MockFunpay)(nil).Balance))
}

// BaseURL mocks base method.
func (m *MockFunpay) BaseURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BaseURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// BaseURL indicates an expected call of BaseURL.
func (mr *MockFunpayMockRecorder) BaseURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BaseURL", reflect.TypeOf((*MockFunpay)(nil).BaseURL))
}

// CSRFToken mocks base method.
func (m *MockFunpay) CSRFToken() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CSRFToken")
	ret0, _ := ret[0].(string)
	return ret0
}

// CSRFToken indicates an expected call of CSRFToken.
func (mr *MockFunpayMockRecorder) CSRFToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CSRFToken", reflect.TypeOf((*MockFunpay)(nil).CSRFToken))
}

// Cookies mocks base method.
func (m *MockFunpay) Cookies() []*http.Cookie {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cookies")
	ret0, _ := ret[0].([]*http.Cookie)
	return ret0
}

// Cookies indicates an expected call of Cookies.
func (mr *MockFunpayMockRecorder) Cookies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cookies", reflect.TypeOf((*MockFunpay)(nil).Cookies))
}

// GoldenKey mocks base method.
func (m *MockFunpay) GoldenKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GoldenKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// GoldenKey indicates an expected call of GoldenKey.
func (mr *MockFunpayMockRecorder) GoldenKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GoldenKey", reflect.TypeOf((*MockFunpay)(nil).GoldenKey))
}

// Locale mocks base method.
func (m *MockFunpay) Locale() funpay.Locale {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Locale")
	ret0, _ := ret[0].(funpay.Locale)
	return ret0
}

// Locale indicates an expected call of Locale.
func (mr *MockFunpayMockRecorder) Locale() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Locale", reflect.TypeOf((*MockFunpay)(nil).Locale))
}

// Request mocks base method.
func (m *MockFunpay) Request(ctx context.Context, requestURL string, opts ...funpay.RequestOpt) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, requestURL}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Request", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Request indicates an expected call of Request.
func (mr *MockFunpayMockRecorder) Request(ctx, requestURL any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, requestURL}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockFunpay)(nil).Request), varargs...)
}

// RequestHTML mocks base method.
func (m *MockFunpay) RequestHTML(ctx context.Context, requestURL string, opts ...funpay.RequestOpt) (*goquery.Document, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, requestURL}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequestHTML", varargs...)
	ret0, _ := ret[0].(*goquery.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestHTML indicates an expected call of RequestHTML.
func (mr *MockFunpayMockRecorder) RequestHTML(ctx, requestURL any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, requestURL}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestHTML", reflect.TypeOf((*MockFunpay)(nil).RequestHTML), varargs...)
}

// SetBaseURL mocks base method.
func (m *MockFunpay) SetBaseURL(baseURL string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBaseURL", baseURL)
}

// SetBaseURL indicates an expected call of SetBaseURL.
func (mr *MockFunpayMockRecorder) SetBaseURL(baseURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBaseURL", reflect.TypeOf((*MockFunpay)(nil).SetBaseURL), baseURL)
}

// SetProxy mocks base method.
func (m *MockFunpay) SetProxy(proxy *url.URL) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetProxy", proxy)
}

// SetProxy indicates an expected call of SetProxy.
func (mr *MockFunpayMockRecorder) SetProxy(proxy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProxy", reflect.TypeOf((*MockFunpay)(nil).SetProxy), proxy)
}

// Update mocks base method.
func (m *MockFunpay) Update(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockFunpayMockRecorder) Update(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFunpay)(nil).Update), ctx)
}

// UpdateLocale mocks base method.
func (m *MockFunpay) UpdateLocale(ctx context.Context, locale funpay.Locale) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLocale", ctx, locale)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLocale indicates an expected call of UpdateLocale.
func (mr *MockFunpayMockRecorder) UpdateLocale(ctx, locale any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLocale", reflect.TypeOf((*MockFunpay)(nil).UpdateLocale), ctx, locale)
}

// UserAgent mocks base method.
func (m *MockFunpay) UserAgent() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAgent")
	ret0, _ := ret[0].(string)
	return ret0
}

// UserAgent indicates an expected call of UserAgent.
func (mr *MockFunpayMockRecorder) UserAgent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAgent", reflect.TypeOf((*MockFunpay)(nil).UserAgent))
}

// UserID mocks base method.
func (m *MockFunpay) UserID() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// UserID indicates an expected call of UserID.
func (mr *MockFunpayMockRecorder) UserID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserID", reflect.TypeOf((*MockFunpay)(nil).UserID))
}

// Username mocks base method.
func (m *MockFunpay) Username() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Username")
	ret0, _ := ret[0].(string)
	return ret0
}

// Username indicates an expected call of Username.
func (mr *MockFunpayMockRecorder) Username() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Username", reflect.TypeOf((*MockFunpay)(nil).Username))
}
